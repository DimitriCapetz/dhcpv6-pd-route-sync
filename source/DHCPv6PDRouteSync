#!/usr/bin/env python

# Copyright (c) 2021, Arista Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#  - Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#  - Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#  - Neither the name of Arista Networks nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ARISTA NETWORKS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# dhcpv6-pd-route-sync
#
#    Written by:
#       Dimitri Capetz, Arista Networks
#       Rob Martin, Arista Networks
#

"""
This EOS SDK script will mount the state of the Route Table
"""

import eossdk
import json
import syslog
import sys
from jsonrpclib import Server

# Set to allow unverified cert for eAPI call
import ssl
try:
    _create_unverified_https_context = ssl._create_unverified_context
except AttributeError:
    # Legacy Python that doesn't verify HTTPS certificates by default
    pass
else:
    # Handle target environment that doesn't support HTTPS verification
    ssl._create_default_https_context = _create_unverified_https_context

__author__ = 'robmartin, dcapetz'
__version__ = '0.1.0'

# Global variables - Credentials for remote switch
remote_password = "0227DcDc!"

class DHCPV6PDROUTESYNC(eossdk.AgentHandler, eossdk.FibHandler, eossdk.VrfHandler):
    def __init__(self, fibMgr, agentMgr, VrfMgr, EapiMgr):
        eossdk.AgentHandler.__init__(self,agentMgr)
        eossdk.FibHandler.__init__(self,fibMgr)
        eossdk.VrfHandler.__init__(self, VrfMgr)
        self.tracer = eossdk.Tracer("DHCPv6PDRouteSync")
        self.fibMgr_ = fibMgr
        self.agentMgr_ = agentMgr
        self.VrfMgr_ = VrfMgr
        self.EapiMgr_ = EapiMgr
        self.tracer.trace0("Constructed")
        # Set Default Values for needed Variables
        # If no VRF specified, assume default VRF
        # This is reset on agent option
        self.VRF = "default"

    def on_initialized(self):
        self.tracer.trace0("We are initialized!")
        self._to_syslog("Agent STARTED", 'DHCPv6 PD Route Sync Agent Initialized')
        # Loop through any pre existing configurations to load
        for _option in self.agentMgr_.agent_option_iter():
            self.on_agent_option(_option, self.agentMgr_.agent_option(_option))
        # On initial startup, check peer device for any existing DHCP and Static routes
        # Would allow for recovery from a reboot / failure gracefully
        _route_check = self.peer_route_check()

    def on_agent_option(self,optionName, value):
        """
        Function called when Daemon Option config added.
        """
        self._to_syslog("Option ADDED", "Key: {key}, Value: {value}".format(
            key = optionName,
            value = value
        ))
        if optionName == "vrf":
            # Ensure VRF exists if the option is set
            if not self.VrfMgr_.exists(value):
                self._to_syslog("Config Option ERROR","Invalid VRF Selection")
                self.agentMgr_.status_set(optionName, "INVALID")
            else:
                self.agentMgr_.status_set(optionName, value)
                self.VRF = value
                self.fibMgr_.register_vrf(value, True)
        elif optionName == "pdmask":
            # Ensure Mask setting is in a valid range
            # Also trigger a re-check of FIB when mask value is changed to ensure it would
            # react properly if the user changed their PD Mask value in prod
            if int(value) not in range(48, 65):
                self._to_syslog("Config Option ERROR", "Valid Prefix Delegation Mask Length is from /48 to /64")
                self.agentMgr_.status_set(optionName, "INVALID")
            else:
                self.agentMgr_.status_set(optionName, value)
            for _route in self.fibMgr_.fib_route_iter():
                if _route.route_type() == eossdk.ROUTE_TYPE_UNKNOWN:
                    if "/{value}".format(value = value) in _route.route_key().prefix().to_string():
                        try:
                            _route_via = self.get_route_via(_route)
                            _str_prefix = _route.route_key().prefix().to_string()
                            #self._to_syslog("DEBUG",_str_prefix)
                            _str_next_hop = _route_via["nexthop"]
                            _str_next_hop_intf = _route_via["intf"]
                            self.add_peer_route(_str_prefix, _str_next_hop_intf, _str_next_hop)
                        except:
                            self._to_syslog("DEBUG","ERROR")
        elif optionName == "peer":
            # No checks on peer value today
            # Potentially check if reachable in future
            self.agentMgr_.status_set(optionName, value)
        else:
            self._to_syslog("Config Option ERROR", "{name} is not a valid config option".format(name = optionName))
            self.agentMgr_.status_set(optionName, "INVALID")

    def peer_route_check(self):
        """
        Function to check peer for existing PD routes on startup
        This will take and create all as static routes locally.
        """
        peer = self.agentMgr_.agent_option("peer")
        self.PASSWORD = remote_password
        peer_url = "https://admin:{password}@{peer}/command-api".format(
            password = self.PASSWORD,
            peer = peer
        )
        try:
            route_config_cmds = []
            peer_switch = Server(peer_url)
            # Check for Static v6 routes on peer with distance of 240, if they exist, prep local static routes
            static_show_resp = peer_switch.runCmds(1, ["show ipv6 route vrf {vrf} static".format(vrf = self.VRF)])
            if static_show_resp[0]["routes"]:
                for prefix, route_data in static_show_resp[0]["routes"].items():
                    if route_data["preference"] == 240:
                        via = route_data["vias"][0]["nexthopAddr"]
                        intf = route_data["vias"][0]["interface"]
                        self._to_syslog("Peer Route Found","Static route for {prefix} found on peer {peer}".format(
                            prefix = prefix,
                            peer = peer
                        ))
                        route_cmd = "ipv6 route vrf {vrf} {prefix} {intf} {via} 240".format(
                            vrf = self.VRF,
                            prefix = prefix,
                            intf = intf,
                            via = via
                        )
                        route_config_cmds.append(route_cmd)
            # Check for DHCPv6 routes on peer, if they exist, prep local static routes
            dhcp_show_resp = peer_switch.runCmds(1, ["show ipv6 route vrf {vrf} dhcp".format(vrf = self.VRF)])
            if dhcp_show_resp[0]["routes"]:
                for prefix, route_data in dhcp_show_resp[0]["routes"].items():
                    via = route_data["vias"][0]["nexthopAddr"]
                    intf = route_data["vias"][0]["interface"]
                    self._to_syslog("Peer Route Found","DHCP route for {prefix} found on peer {peer}".format(
                        prefix = prefix,
                        peer = peer
                    ))
                    route_cmd = "ipv6 route vrf {vrf} {prefix} {intf} {via} 240".format(
                        vrf = self.VRF,
                        prefix = prefix,
                        intf = intf,
                        via = via
                    )
                    route_config_cmds.append(route_cmd)
            # If any routes were found, attempt to apply them as static routes via local eAPI module
            if route_config_cmds:
                route_config_cmds.append("write")
                try:
                    apply_static_config = self.EapiMgr_.run_config_cmds([z for z in route_config_cmds])
                    if (apply_static_config.success()):
                        self._to_syslog("DHCPv6 PD Routes ADDED","Created local static routes for routes found on peer")
                    else:
                        self._to_syslog("CONFIG ERROR", "Unable to add static routes")
                        # provide some details on what error there was with configuration
                        self._to_syslog("CONFIG ERROR", apply_static_config.error_message())
                except:
                    self._to_syslog("DEBUG","ERROR applying configuration via local eAPI interaction module.")
            else:
                self._to_syslog("PD ROUTE not found","No Static or DHCP v6 routes found on peer {peer}. No action taken.".format(
                    peer = peer
                ))
        except:
            self._to_syslog("DEBUG","ERROR CHECKING ROUTES ON PEER")


    def get_route_via(self, _ip_route):
        """
        Function to get the next hop for a specified route.
        Returns dictionary of relavent info
        Parameters:
        _ip_route = EosSdk ip_route type
        """
        _fec_id = _ip_route.fec_id()
        _tmp_fec = self.fibMgr_.fib_fec(eossdk.FibFecKey(_fec_id))
        _route_via = _tmp_fec.via()
        route_data = {
            "intf" : _route_via[0].intf().to_string(),
            "nexthop" : _route_via[0].hop().to_string()
        }
        return(route_data)
        

    def on_route_set(self, _fib_route_update):
        """
        Built-in Fuction to trigger when a remote is added.
        Will check to see if it matches criteria for a DHCPv6 PD route
        and if so, then add the static route on peer
        Parameters:
        _fib_route_update = FIB Data for new Route (class object)
        """
        mask = "/{mask}".format(mask = self.agentMgr_.agent_option("pdmask"))
        if _fib_route_update.route_type() == eossdk.ROUTE_TYPE_UNKNOWN:
            if mask in _fib_route_update.route_key().prefix().to_string():
                _str_prefix = _fib_route_update.route_key().prefix().to_string()
                # If route type is UNKNOWN and has matching mask length, assume a DHCPv6 Route
                self._to_syslog("DHCPv6 PD DETECTED","New prefix {prefix} has been delegated".format(
                    prefix = _str_prefix
                ))
                try:
                    _route_via = self.get_route_via(_fib_route_update)
                    _str_next_hop = _route_via["nexthop"]
                    _str_next_hop_intf = _route_via["intf"]
                    self.add_peer_route(_str_prefix, _str_next_hop_intf, _str_next_hop)
                    self.agentMgr_.status_set(_str_prefix, "Next-hop {next_hop}".format(
                        next_hop = _str_next_hop
                    ))
                except:
                    self._to_syslog("DEBUG","ERROR GETTING INFO TO CONFIGURE ROUTE ON PEER")
                # Do a check on local routes to see if overlapping static route exists
                # These should only exist in two cases
                # 1. A router was rebooted and ingested the DHCPv6 PD routes from the peer
                #    as static routes.  When the DHCP renewal occurs, the DHCPv6 route should
                #    take precedence
                # 2. The initial DHCP request was received on the peer, but the subsequent
                #    renewal/request was received locally. Again, the DHCPv6 should take precedence
                try:
                    local_config_resp = self.EapiMgr_.run_show_cmd("show running-config")
                    local_config_dict = json.loads(local_config_resp.responses()[0])
                    for key in local_config_dict["cmds"].keys():
                        if _str_prefix in key:
                            self._to_syslog("Local Route Found","Local static route for {prefix} found. Deleting...".format(
                                prefix = _str_prefix
                            ))
                            route_cmd = "no {route}".format(route = key)
                            route_config_cmd = [route_cmd]
                            route_config_cmd.append("write")
                            try:
                                remove_static_config = self.EapiMgr_.run_config_cmds([z for z in route_config_cmd])
                                if (remove_static_config.success()):
                                    self._to_syslog("Static Route REMOVED","Overlapping local static route removed")
                                else:
                                    self._to_syslog("CONFIG ERROR", "Unable to remove static route")
                                    # provide some details on what error there was with configuration
                                    self._to_syslog("CONFIG ERROR", apply_static_config.error_message())
                            except:
                                self._to_syslog("DEBUG","ERROR applying configuration via local eAPI interaction module.")
                except:
                    self._to_syslog("DEBUG","ERROR retrieving configuration via local eAPI interaction module.")

    def on_route_del(self, _fib_route_update_key):
        """
        Built-in Fuction to trigger when a remote is removed.
        Will check to see if it matches criteria for a DHCPv6 PD route
        and if so, then remove the static route on peer
        Parameters:
        _fib_route_update_key = Prefix data of removed route (class object)
        """
        mask = "/{mask}".format(mask = self.agentMgr_.agent_option("pdmask"))
        if mask in _fib_route_update_key.prefix().to_string():
            _str_prefix = _fib_route_update_key.prefix().to_string()
            self._to_syslog("DHCPv6 PD EXPIRED","Potential Delegated prefix {prefix} removed from local FIB. Checking peer...".format(
                prefix = _str_prefix
            ))
            self.remove_peer_route(_str_prefix)
            self.agentMgr_.status_del(_str_prefix)

    def add_peer_route(self, _prefix, _intf, _via):
        """
        Fuction to add static IPv6 route to peer router
        Will check for overlapping route and remove if conflicting
        Parameters:
        _prefix = Subnet of Delegated Prefix (string)
        _intf = Nexthop Interface (string)
        _via = Nexthop IPv6 Address (string)
        """
        route_cmd = "ipv6 route vrf {vrf} {prefix} {intf} {via} 240".format(
            vrf = self.VRF,
            prefix = _prefix,
            intf = _intf,
            via = _via
        )
        route_show_cmd = "show ipv6 route vrf {vrf} {prefix} static".format(
            vrf = self.VRF,
            prefix = _prefix
        )
        peer = self.agentMgr_.agent_option("peer")
        self.PASSWORD = remote_password
        peer_url = "https://admin:{password}@{peer}/command-api".format(
            password = self.PASSWORD,
            peer = peer
        )
        try:
            peer_switch = Server(peer_url)
            show_resp = peer_switch.runCmds(1, [route_show_cmd])
            if show_resp[0]["routes"]:
                existing_via = show_resp[0]["routes"][_prefix]["vias"][0]["nexthopAddr"]
                if existing_via == _via:
                    self._to_syslog("DHCPv6 PD Exists", "Static route for {prefix} via {via} already exists. No action taken.".format(
                        prefix = _prefix,
                        via = _via
                    ))
                else:
                    self._to_syslog("DHCPv6 PD Route FOUND", "Overlapping DHCPv6 PD Static Route found on peer. Removing...")
                    route_remove_cmd = "no ipv6 route vrf {vrf} {prefix} {intf} {via} 240".format(
                        vrf = self.VRF,
                        prefix = _prefix,
                        intf = _intf,
                        via = existing_via
                    )
                    config_resp = peer_switch.runCmds(1, [
                        "enable",
                        "configure",
                        route_remove_cmd,
                        route_cmd,
                        "write",
                        "end"
                    ])
                    self._to_syslog("DHCPv6 PD Route ADDED","Configured route for delegated prefix {prefix} to {via} on peer router {peer}".format(
                        prefix = _prefix,
                        via = _via,
                        peer = peer
                    ))
            else:
                config_resp = peer_switch.runCmds(1, [
                    "enable",
                    "configure",
                    route_cmd,
                    "write",
                    "end"
                ])
                self._to_syslog("DHCPv6 PD Route ADDED","Configured route for delegated prefix {prefix} to {via} on peer router {peer}".format(
                    prefix = _prefix,
                    via = _via,
                    peer = peer
                ))
        except:
            self._to_syslog("DEBUG","ERROR CONFIGURING PEER")

    def remove_peer_route(self, _prefix):
        """
        Fuction to remove static IPv6 route to peer router
        Requires check of current static routes to ensure accuracy
        Parameters:
        _prefix = Subnet of Delegated Prefix (string)
        """
        route_show_cmd = "show ipv6 route vrf {vrf} {prefix} static".format(
            vrf = self.VRF,
            prefix = _prefix
        )
        peer = self.agentMgr_.agent_option("peer")
        self.PASSWORD = remote_password
        peer_url = "https://admin:{password}@{peer}/command-api".format(
            password = self.PASSWORD,
            peer = peer
        )
        try:
            peer_switch = Server(peer_url)
            show_resp = peer_switch.runCmds(1, [route_show_cmd])
            if show_resp[0]["routes"]:
                self._to_syslog("Peer Route Found","Matching static route for {prefix} found on peer {peer}".format(
                    prefix = _prefix,
                    peer = peer
                ))
                _via = show_resp[0]["routes"][_prefix]["vias"][0]["nexthopAddr"]
                _intf = show_resp[0]["routes"][_prefix]["vias"][0]["interface"]
                route_cmd = "no ipv6 route vrf {vrf} {prefix} {intf} {via}".format(
                    vrf = self.VRF,
                    prefix = _prefix,
                    intf = _intf,
                    via = _via
                )
                try:
                    config_resp = peer_switch.runCmds(1,[
                        "enable",
                        "configure",
                        route_cmd,
                        "write",
                        "end"
                    ])
                    self._to_syslog("DHCPv6 PD Route REMOVED","Deleted route for delegated prefix {prefix} to {via} on peer router {peer}".format(
                        prefix = _prefix,
                        via = _via,
                        peer = peer
                    ))
                except:
                    self._to_syslog("DEBUG","ERROR REMOVING ROUTE FROM PEER")
            else:
                self._to_syslog("PD ROUTE not found","Matching static route for {prefix} not found on peer {peer}. No action taken.".format(
                    prefix = _prefix,
                    peer = peer
                ))
        except:
            self._to_syslog("DEBUG","ERROR CHECKING ROUTE ON PEER")

    def _to_syslog(self, sys_type, sys_msg):
        syslog.syslog("%%SDK-DHCPv6PDRouteSync-Log-6-LOG: {type}: {msg}".format(
            type = sys_type,
            msg = sys_msg
        ))
    
        

if __name__ == '__main__':
    syslog.openlog('SDK-DHCPv6PDRouteSync-Log',0,syslog.LOG_LOCAL4)
    sdk = eossdk.Sdk()
    _ = DHCPV6PDROUTESYNC(sdk.get_fib_mgr(eossdk.MODE_TYPE_READ_NOTIFYING),sdk.get_agent_mgr(),sdk.get_vrf_mgr(),sdk.get_eapi_mgr())
    sdk.main_loop(sys.argv)