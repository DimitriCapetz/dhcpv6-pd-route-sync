#!/usr/bin/env python

# Copyright (c) 2021, Arista Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#  - Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#  - Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#  - Neither the name of Arista Networks nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ARISTA NETWORKS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# eos-sdk-route-update
#
#    Written by:
#       Rob Martin, Arista Networks
#

"""
This EOS SDK script will mount the state of the Route Table
"""

import eossdk
import syslog
import sys
import time
import re

__author__ = 'robmartin'
__version__ = '0.1.0'

MTU_DEFAULT = 1500

class ROUTEUPDATE(eossdk.AgentHandler, eossdk.FibHandler):
    def __init__(self, fibMgr, agentMgr):
        eossdk.AgentHandler.__init__(self,agentMgr)
        eossdk.FibHandler.__init__(self,fibMgr)
        self.tracer = eossdk.Tracer("EosSdkRouteUpdate")
        self.fibMgr_ = fibMgr
        self.agentMgr_ = agentMgr
        self.MTU = MTU_DEFAULT
        self.tracer.trace0("Constructed")

    def on_initialized(self):
        self.tracer.trace0("We are initialized!")
        self.agentMgr_.status_set("MTU", str(self.MTU))
        self._to_syslog("Agent STARTED", 'Route Upate Agent Initialized')
        # Loop through any pre existing configurations to load
        for _option in self.agentMgr_.agent_option_iter():
            self.on_agent_option(_option, self.agentMgr_.agent_option(_option))
    
    def on_agent_option(self,optionName, value):
        """
        Function called when Daemon Option config added.
        """
        self._to_syslog("Option ADDED", "Key: {key}, Value: {value}".format(
            key = optionName,
            value = value
        ))
        if optionName.lower() == 'mtu':
            if value:
                self._to_syslog("Option UPDATED", "MTU value changed from %s to %s"%(self.MTU,value))
                self.MTU = int(value)
            else:
                self._to_syslog("Option UPDATED", "MTU value changed from %s to 10"%(self.MTU))
                self.MTU = MTU_DEFAULT
            self.agentMgr_.status_set("MTU", str(self.MTU))

    def verify_ip_addr(self, ip_string):
        """
        Function to check if provided IP is valid.
        Parameters:
        ip_string = IP Address with mask (10.10.10.10/32)
        """
        self._to_syslog("INFO", "Verify IP")


    def _to_syslog(self, sys_type, sys_msg):
        syslog.syslog("%%SDK-RouteUpdate-Log-6-LOG: {type}: {msg}".format(
            type = sys_type,
            msg = sys_msg
        ))
    
        

if __name__ == '__main__':
    syslog.openlog('SDK-RouteUpdate-Log',0,syslog.LOG_LOCAL4)
    sdk = eossdk.Sdk()
    _ = ROUTEUPDATE(sdk.get_fib_mgr(),sdk.get_agent_mgr())
    sdk.main_loop(sys.argv)